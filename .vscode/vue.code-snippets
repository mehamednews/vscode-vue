{
   "import component": {
      "scope": "javascript",
      "prefix": "impComp",
      "body": "import ${1:compName} from '@/src/components/${1:compName}';",
      "description": "importing a component from src/components"
   },
   "v-slot:default": {
      "scope": "jade,pug",
      "prefix": "slot",
      "body": ["#${1:default}=\"props\""],
      "description": "v-slot:default=\"slotProps\""
   },
   "template v-slot:default": {
      "scope": "jade,pug",
      "prefix": "template-slot",
      "body": ["template(#${1:default}=\"${2:props}\") ${3:content}"],
      "description": "v-slot:default=\"slotProps\""
   },
   "Vue Single File Component": {
      "scope": "vue",
      "prefix": "vbase",
      "body": [
         "<template>",
         "\t<div>",
         "",
         "\t</div>",
         "</template>",
         "",
         "<script>",
         "\texport default {",
         "\t\t${0}",
         "\t}",
         "</script>",
         "",
         "<style scoped>",
         "",
         "</style>"
      ],
      "description": "Base for Vue File"
   },
   "Vue Single File Component Pug": {
      "scope": "vue",
      "prefix": "vbasep",
      "body": [
         "<template lang=\"pug\">",
         "\tdiv",
         "</template>",
         "",
         "<script>",
         "\texport default {",
         "\t\t${0}",
         "\t}",
         "</script>",
         "",
         "<style lang=\"scss\" scoped>",
         "",
         "</style>"
      ],
      "description": "Base for Vue File Pug"
   },
   "Vue Data": {
      "scope": "vue",
      "prefix": "vdata",
      "body": [
         "data() {",
         "\treturn {",
         "\t\t${1:key}: ${2:value}",
         "\t}",
         "},"
      ],
      "description": "Vue Component Data"
   },
   "Vuex Store": {
      "scope": "vue",
      "prefix": "vstore",
      "body": [
         "import Vue from 'vue';",
         "import Vuex from 'vuex';",
         "",
         "Vue.use(Vuex);",
         "",
         "export const store = new Vuex.Store({",
         "\tstate: {",
         "\t\t${1:key}: ${2:value}",
         "\t}",
         "});"
      ],
      "description": "Base for Vuex store"
   },
   "Vue Props with Default": {
      "scope": "vue",
      "prefix": "vprops",
      "body": [
         "props: {",
         "\t${1:propName}: {",
         "\t\ttype: ${2:number},",
         "\t\tdefault: ${0}",
         "\t},",
         "},"
      ],
      "description": "Vue Props with Default"
   },
   "Vue Import File": {
      "scope": "vue",
      "prefix": "vimport",
      "body": ["import ${1:New} from './components/${1:New}.vue';"],
      "description": "Import one component into another"
   },
   "Vue Import into the Component": {
      "scope": "vue",
      "prefix": "vComponents",
      "body": ["components: {", "\t${1:New},", "}"],
      "description": "Import one component into another, within export statement"
   },

   "Vue Transition Methods with JavaScript Hooks": {
      "scope": "vue",
      "prefix": "vanimhook-js",
      "body": [
         "methods: {",
         "\tbeforeEnter(el) {",
         "\t\tconsole.log('beforeEnter');",
         "\t},",
         "\tenter(el, done) {",
         "\t\tconsole.log('enter');",
         "\t\tdone();",
         "\t},",
         "\tbeforeLeave(el) {",
         "\t\tconsole.log('beforeLeave');",
         "\t},",
         "\tleave(el, done) {",
         "\t\tconsole.log('leave');",
         "\t\tdone();",
         "\t},",
         "},"
      ],
      "description": "transition component js hooks"
   },
   "Vuex Getters": {
      "scope": "vue",
      "prefix": "vgetter",
      "body": [
         "getters: {",
         "\tvalue: ${1:value} => {",
         "\t\treturn state.${1:value};",
         "\t}",
         "}"
      ],
      "description": "vuex getter"
   },
   "Vuex Mutation": {
      "scope": "vue",
      "prefix": "vmutation",
      "body": [
         "mutations: {",
         "\t${1:updateValue}(state, ${3:payload}) {",
         "\t\tstate.${2:value} = ${3:payload};",
         "\t}",
         "}"
      ],
      "description": "vuex mutation"
   },
   "Vuex Action": {
      "scope": "vue",
      "prefix": "vaction",
      "body": [
         "actions: {",
         "\t${1:updateValue}({commit}, ${2:payload}) {",
         "\t\tcommit(${1:updateValue}, ${2:payload});",
         "\t}",
         "}"
      ],
      "description": "vuex action"
   },
   "Vue Filter": {
      "scope": "vue",
      "prefix": "vfilter",
      "body": [
         "filters: {",
         "\t${1:fnName}: function(${2:value}) {",
         "\t\treturn ${2:value}${0};",
         "\t}",
         "}"
      ],
      "description": "vue filter"
   },
   "Vue Mixin": {
      "scope": "vue",
      "prefix": "vmixin",
      "body": [
         "const ${1:mixinName} = {",
         "\tmounted() {",
         "\t\tconsole.log('hello from mixin!')",
         "\t},",
         "}"
      ],
      "description": "vue mixin"
   },
   "Vue Use Mixin": {
      "scope": "vue",
      "prefix": "vmixin-use",
      "body": ["mixins: [${1:mixinName}]"],
      "description": "vue use mixin"
   },
   "Vue Custom Directive": {
      "scope": "vue",
      "prefix": "vc-direct",
      "body": [
         "Vue.directive('${1:directiveName}', {",
         "\tbind(el, binding, vnode) {",
         "\t\tel.style.${2:arg} = binding.value.${2:arg};",
         "\t}",
         "});"
      ],
      "description": "vue custom directive"
   },
   "Vue Methods": {
      "scope": "vue",
      "prefix": "vmethod",
      "body": ["methods: {", "\t${1:name}() {", "\t\t${0}", "\t}", "},"],
      "description": "vue method"
   },
   "Vue Computed": {
      "scope": "vue",
      "prefix": "vcomputed",
      "body": [
         "computed: {",
         "\t${1:name}() {",
         "\t\treturn this.${2:data} ${0}",
         "\t}",
         "},"
      ],
      "description": "computed value"
   },
   "Vue Watchers": {
      "scope": "vue",
      "prefix": "vwatcher",
      "body": [
         "watch: {",
         "\t${1:data}(${2:newValue}, ${3:oldValue}) {",
         "\t\t${0}",
         "\t}",
         "},"
      ],
      "description": "vue watcher"
   },
   "Vue Import Vuex Store": {
      "scope": "vue",
      "prefix": "vstore-import",
      "body": ["import { store } from './store/store';"],
      "description": "import vuex store into main.js"
   },
   "Vue Import Library": {
      "scope": "vue",
      "prefix": "vimport-lib",
      "body": ["import { ${1:libName} } from '${1:libName}'"],
      "description": "import a library"
   },
   "Vue Import GSAP": {
      "scope": "vue",
      "prefix": "vimport-gsap",
      "body": ["import { TimelineMax, ${1:Ease} } from 'gsap'"],
      "description": "component methods options that dispatch an action from vuex store."
   },
   "Vue v-model Directive": {
      "scope": "vue",
      "prefix": "vmodel",
      "body": ["<input v-model=\"${1:data}\" type=\"text\" />"],
      "description": "v-model directive"
   },
   "Vue v-model Number Directive": {
      "scope": "vue",
      "prefix": "vmodel-num",
      "body": [
         "<input v-model.number=\"${1:numData}\" type=\"number\" step=\"1\" />"
      ],
      "description": "v-model directive number input"
   },
   "Vue v-on Shortcut Directive": {
      "scope": "vue",
      "prefix": "von",
      "body": ["@click=\"${1:handler}(${2:arg}, $event)\""],
      "description": "v-on click handler with arguments"
   },
   "Vue Component with Props Binding": {
      "scope": "vue",
      "prefix": "vel-props",
      "body": ["<${1:component} :${1:propName}=\"${0}\"></${1:component}>"],
      "description": "component element with props"
   },
   "Vue Image Source Binding": {
      "scope": "vue",
      "prefix": "vsrc",
      "body": [
         "<img :src=\"'/path/to/images/' + ${1:fileName}\" alt=\"${2:altText}\"/>"
      ],
      "description": "image source binding"
   },
   "Vue Style Binding": {
      "scope": "vue",
      "prefix": "vstyle",
      "body": [
         "<${1:div} :style=\"{ fontSize: ${2:data} + 'px' }\"></${1:div}>"
      ],
      "description": "vue inline style binding"
   },
   "Vue Style Binding Object": {
      "scope": "vue",
      "prefix": "vstyle-obj",
      "body": [
         "<${1:div} :style=\"[${2:styleObjectA}, ${3:styleObjectB]}\"></${1:div}>"
      ],
      "description": "vue inline style binding, objects"
   },

   "a": {
      "scope": "jade,pug",
      "prefix": "a",
      "body": "a(href=\"${2:#}\", title=\"${3:title}\")${1:.class} $0",
      "description": "a(href=\"#\", title=\"title\").class"
   },
   "figure": {
      "scope": "jade,pug",
      "prefix": "figure",
      "body": [
         "figure",
         "\timg(src=\"${2:source}\", alt=\"${3:alt}\")${1:.class}",
         "\tfigcaption $0"
      ],
      "description": "figure > img(src=\"source\", alt=\"alt\").class > figcaption"
   },
   "img": {
      "scope": "jade,pug",
      "prefix": "img",
      "body": ["img(src=\"${2:source}\", alt=\"${3:alt}\")${1:.class}"],
      "description": "img(src=\"source\", alt=\"alt\").class "
   },

   "class": {
      "scope": "jade,pug",
      "prefix": "class",
      "body": "class=\"$1\"$0",
      "description": "Set class attribute"
   },
   "id": {
      "scope": "jade,pug",
      "prefix": "id",
      "body": "id=\"$1\"$0",
      "description": "Set id attribute"
   },
   "data": {
      "scope": "jade,pug",
      "prefix": "data",
      "body": "data-$1=\"$2\"$0",
      "description": "Set data attribute"
   },
   "aria": {
      "scope": "jade,pug",
      "prefix": "aria",
      "body": "aria-$1=\"$2\"$0",
      "description": "Set aria attribute"
   },
   "role": {
      "scope": "jade,pug",
      "prefix": "role",
      "body": "role=\"$1\"$0",
      "description": "Set role attribute"
   },
   "method": {
      "scope": "jade,pug",
      "prefix": "method",
      "body": "method=\"$1\"$0",
      "description": "Set method attribute for form"
   },
   "action": {
      "scope": "jade,pug",
      "prefix": "action",
      "body": "action=\"$1\"$0",
      "description": "Set action attribute for form"
   },
   "type": {
      "scope": "jade,pug",
      "prefix": "type",
      "body": "type=\"$1\"$0",
      "description": "Set type attribute for form elements"
   },
   "name": {
      "scope": "jade,pug",
      "prefix": "name",
      "body": "name=\"$1\"$0",
      "description": "Set name attribute for form elements"
   },
   "placeholder": {
      "scope": "jade,pug",
      "prefix": "placeholder",
      "body": "placeholder=\"$1\"$0",
      "description": "Set placeholder attribute for form elements"
   },
   "value": {
      "scope": "jade,pug",
      "prefix": "value",
      "body": "value=\"$1\"$0",
      "description": "Set value attribute for form elements"
   },
   "v-html": {
      "scope": "jade,pug",
      "prefix": "vHtml",
      "body": ["v-html=\"${1:html}\""],
      "description": "Expects: string"
   },
   "v-if": {
      "scope": "jade,pug",
      "prefix": "vIf",
      "body": ["v-if=\"${1:condition}\""],
      "description": "Expects: any"
   },
   "v-show": {
      "scope": "jade,pug",
      "prefix": "vShow",
      "body": ["v-show=\"${1:condition}\""],
      "description": "Expects: any"
   },
   "v-else": {
      "scope": "jade,pug",
      "prefix": "vElse",
      "body": ["v-else"],
      "description": "Does not expect expression. previous sibling element must have v-if or v-else-if."
   },
   "v-else-if": {
      "scope": "jade,pug",
      "prefix": "vElseIf",
      "body": ["v-else-if=\"${1:condition}\""],
      "description": "Expects: any. previous sibling element must have v-if or v-else-if."
   },
   "v-for": {
      "scope": "jade,pug",
      "prefix": "vFor",
      "body": ["v-for=\"${1:item} in ${2:items}\""],
      "description": "Expects: Array | Object | number | string"
   },
   "v-on": {
      "scope": "jade,pug",
      "prefix": "vOn",
      "body": ["v-on:${1:event}=\"${2:handle}\""],
      "description": "Expects: Function | Inline Statement"
   },
   "v-bind": {
      "scope": "jade,pug",
      "prefix": "vBind",
      "body": ["v-bind$1=\"${2}\""],
      "description": "Expects: any (with argument) | Object (without argument)"
   },
   "v-model": {
      "scope": "jade,pug",
      "prefix": "vModel",
      "body": ["v-model=\"${1:something}\""],
      "description": "Expects: varies based on value of form inputs element or output of components"
   },
   "v-pre": {
      "scope": "jade,pug",
      "prefix": "vPre",
      "body": ["v-pre"],
      "description": "Does not expect expression"
   },
   "v-cloak": {
      "scope": "jade,pug",
      "prefix": "vCloak",
      "body": ["v-cloak"],
      "description": "Does not expect expression"
   },
   "v-once": {
      "scope": "jade,pug",
      "prefix": "vOnce",
      "body": ["v-once"],
      "description": "Does not expect expression"
   },
   "key": {
      "scope": "jade,pug",
      "prefix": "key",
      "body": [":key=\"${1:key}\""],
      "description": "Expects: string. The key special attribute is primarily used as a hint for Vue’s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
   },
   "ref": {
      "scope": "jade,pug",
      "prefix": "ref",
      "body": ["ref=\"${1:reference}\"$0"],
      "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
   },
   "slotA": {
      "scope": "jade,pug",
      "prefix": "slotA",
      "body": ["slot=\"$1\"$0"],
      "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
   },
   "slotE": {
      "scope": "jade,pug",
      "prefix": "slotE",
      "body": ["slot"],
      "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
   },
   "component": {
      "scope": "jade,pug",
      "prefix": "component",
      "body": ["component(:is=\"${1:componentId}\") $0"],
      "description": "component element"
   },
   "keep-alive": {
      "scope": "jade,pug",
      "prefix": "keepAlive",
      "body": ["keep-alive$0"],
      "description": "keep-alive element"
   },
   "transition": {
      "scope": "jade,pug",
      "prefix": "transition",
      "body": ["transition$0"],
      "description": "transition element"
   },
   "transition-group": {
      "scope": "jade,pug",
      "prefix": "transitionGroup",
      "body": ["transition-group$0"],
      "description": "transition-group element"
   },
   "routerLink": {
      "scope": "jade,pug",
      "prefix": "routerLink",
      "body": ["router-link $0"],
      "description": "router-link element"
   },
   "routerLinkTo": {
      "scope": "jade,pug",
      "prefix": "routerLinkTo",
      "body": ["router-link (to=\"$1\") $0"],
      "description": "router-link (to='') . router-link element"
   },
   "to": {
      "scope": "jade,pug",
      "prefix": "to",
      "body": ["to=\"$1\"$0"],
      "description": "to=''"
   },
   "tag": {
      "scope": "jade,pug",
      "prefix": "tag",
      "body": ["tag=\"$1\"$0"],
      "description": "tag=''"
   },
   "routerView": {
      "scope": "jade,pug",
      "prefix": "routerView",
      "body": ["router-view $0"],
      "description": "router-view element"
   }
}
